{"remainingRequest":"/Users/charleszheng/Desktop/Code/Inventory/src/main/angular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/charleszheng/Desktop/Code/Inventory/src/main/angular/node_modules/angular2-toaster/src/toast.component.js","dependencies":[{"path":"/Users/charleszheng/Desktop/Code/Inventory/src/main/angular/node_modules/angular2-toaster/src/toast.component.js","mtime":1529585294000},{"path":"/Users/charleszheng/Desktop/Code/Inventory/src/main/angular/node_modules/cache-loader/dist/cjs.js","mtime":1630724120110},{"path":"/Users/charleszheng/Desktop/Code/Inventory/src/main/angular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { Component, Input, Output, ViewChild, ViewContainerRef, EventEmitter, ComponentFactoryResolver, ChangeDetectorRef } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { BodyOutputType } from './bodyOutputType';\nvar ToastComponent = /** @class */ /*@__PURE__*/ (function () {\n    function ToastComponent(sanitizer, componentFactoryResolver, changeDetectorRef) {\n        this.sanitizer = sanitizer;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.changeDetectorRef = changeDetectorRef;\n        this.bodyOutputType = BodyOutputType;\n        this.clickEvent = new EventEmitter();\n    }\n    ToastComponent.prototype.ngOnInit = function () {\n        if (this.toast.closeHtml) {\n            this.safeCloseHtml = this.sanitizer.bypassSecurityTrustHtml(this.toast.closeHtml);\n        }\n        if (this.toast.bodyOutputType === BodyOutputType.TrustedHtml) {\n            this.safeBodyHtml = this.sanitizer.bypassSecurityTrustHtml(this.toast.body);\n        }\n    };\n    ToastComponent.prototype.ngAfterViewInit = function () {\n        if (this.toast.bodyOutputType === this.bodyOutputType.Component) {\n            var component = this.componentFactoryResolver.resolveComponentFactory(this.toast.body);\n            var componentInstance = this.componentBody.createComponent(component, undefined, this.componentBody.injector);\n            componentInstance.instance.toast = this.toast;\n            this.changeDetectorRef.detectChanges();\n        }\n    };\n    ToastComponent.prototype.click = function (event, toast) {\n        event.stopPropagation();\n        this.clickEvent.emit({\n            value: { toast: toast, isCloseButton: true }\n        });\n    };\n    return ToastComponent;\n}());\nexport { ToastComponent };\n//# sourceMappingURL=toast.component.js.map\n",null]}